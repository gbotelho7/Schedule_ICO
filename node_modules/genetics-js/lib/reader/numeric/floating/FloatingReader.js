"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingReader = void 0;
const floating_1 = require("../../../individual/numeric/floating/");
const base_1 = require("../base/");
/**
 * ## Floating Individual reader
 * Implements a reader for floating individuals.
 * The format of this individuals is the following:
 * ```
 * 3 -4 8 9     // OK (integer number are floating)
 * 3.45 845.5   // OK (fixed point notation)
 * 3e-2 4E-9    // OK (scientific notation allowed)
 * ```
 */
class FloatingReader extends base_1.NumericReader {
    constructor() {
        super(...arguments);
        this.tokenDefinition = [
            {
                token: /^[+-]?\d+(?:(?:\.\d+)?(?:[Ee][+-]?\d+)?)?$/,
                value: (token) => Number.parseFloat(token),
            },
            {
                token: /^[+-]?\.\d+(?:[Ee][+-]?\d+)?$/,
                value: (token) => Number.parseFloat(token),
            },
        ];
    }
    /**
     * Reads a definition and converts
     * into an [[FloatingIndividual]].
     * @param definition of the individual.
     * @return the read individual.
     * @throws Error if definition is not correct.
     */
    read(definition) {
        const genotype = this.getGenotype(this.tokenize(definition));
        return new floating_1.FloatingIndividual(genotype);
    }
}
exports.FloatingReader = FloatingReader;
//# sourceMappingURL=FloatingReader.js.map