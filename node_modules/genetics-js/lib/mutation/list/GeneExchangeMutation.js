"use strict";
/*
 * @license
 * Copyright (c) 2021 Cristo Navarro.
 * Copyright (c) 2020 Francisco Cruz.
 * Copyright (c) 2019 Cristian Abrante.
 * All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneExchangeMutation = void 0;
const utils_1 = require("../../generator/utils");
const individual_1 = require("../../individual");
const UniformListMutation_1 = require("./UniformListMutation");
/**
 * ## Gene Exchange Mutation
 * Class that implements a mutation operator for List Individuals.
 *
 * This operator is applied to each gene of the genotype and changes one node
 * of the list correspondind to the current gene, with another node from a
 * different gene. Both nodes, and the other gene are chosen randomly.
 */
class GeneExchangeMutation extends UniformListMutation_1.UniformListMutation {
    /**
     * Mutation operator that is applied to the gene in the specified index.
     * The operator swaps a node of the current list with a node from another one.
     * @param individual Individual that the operator is applied on
     * @param index Index of the current gene
     * @param params Operator parameters
     */
    mutateGeneUniformly(individual, index, params) {
        const currentGene = individual.get(index);
        const individualRange = new individual_1.NumericRange(0, individual.length() - 1);
        let otherGeneIndex = utils_1.Generator.generateInteger(individualRange);
        if (individual.length() > 1) {
            while (index === otherGeneIndex) {
                otherGeneIndex = utils_1.Generator.generateInteger(individualRange);
            }
        }
        const otherGene = individual.get(otherGeneIndex);
        let currentIndex = params.initialIndex;
        let otherIndex = params.initialIndex;
        if (params.initialIndex <= currentGene.length() - 1 && params.initialIndex <= otherGene.length() - 1) {
            if (params.initialIndex < currentGene.length() - 1) {
                const currentRange = new individual_1.NumericRange(params.initialIndex, currentGene.length() - 1);
                currentIndex = utils_1.Generator.generateInteger(currentRange);
            }
            if (params.initialIndex < otherGene.length() - 1) {
                const otherRange = new individual_1.NumericRange(params.initialIndex, otherGene.length() - 1);
                otherIndex = utils_1.Generator.generateInteger(otherRange);
            }
            const currentData = currentGene.get(currentIndex);
            const otherData = otherGene.get(otherIndex);
            currentGene.swapWith(currentIndex, otherData);
            otherGene.swapWith(otherIndex, currentData);
        }
    }
}
exports.GeneExchangeMutation = GeneExchangeMutation;
//# sourceMappingURL=GeneExchangeMutation.js.map