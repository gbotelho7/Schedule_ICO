"use strict";
/*
 * @license
 * Copyright (c) 2021 Cristo Navarro.
 * Copyright (c) 2020 Francisco Cruz.
 * Copyright (c) 2019 Cristian Abrante.
 * All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InnerExchangeMutation = void 0;
const utils_1 = require("../../generator/utils");
const individual_1 = require("../../individual");
const UniformListMutation_1 = require("./UniformListMutation");
/**
 * ## Inner Exchange Mutation
 * Class that implements a mutation operator for List Individuals.
 *
 * This operator is applied to each gene of the genotype and swaps two nodes
 * chosen randomly from the current gene.
 */
class InnerExchangeMutation extends UniformListMutation_1.UniformListMutation {
    /**
     * Mutation operator that is applied to the gene in the specified index.
     * The operator swaps two nodes of the current list.
     * @param individual Individual that the operator is applied on
     * @param index Index of the current gene
     * @param params Operator parameters
     */
    mutateGeneUniformly(individual, index, params) {
        const gene = individual.get(index);
        if (gene.length() > 1 && params.initialIndex < gene.length() - 1) {
            const range = new individual_1.NumericRange(params.initialIndex, gene.length() - 1);
            const firstIndex = utils_1.Generator.generateInteger(range);
            let secondIndex = utils_1.Generator.generateInteger(range);
            if (gene.length() > 1) {
                while (secondIndex === firstIndex) {
                    secondIndex = utils_1.Generator.generateInteger(range);
                }
            }
            gene.swap(firstIndex, secondIndex);
        }
    }
}
exports.InnerExchangeMutation = InnerExchangeMutation;
//# sourceMappingURL=InnerExchangeMutation.js.map