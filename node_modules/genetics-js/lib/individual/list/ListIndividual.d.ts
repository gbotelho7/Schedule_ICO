import { MutableIndividual } from '../base';
import { List } from './List';
/**
 * ## List Individual
 * List Individual is a individual where all the genes in the genotype are
 * simple linked lists.
 * @typeparam T type of the data of the lists nodes
 */
export declare class ListIndividual<T> extends MutableIndividual<List<T>> {
    /**
     * Constructor of the class.
     * Initializes the genotype of the individual with the given lists.
     * @param creationParams Initial genotype for the individual
     */
    constructor(genotype: Array<List<T>>);
    /**
     * Creates a deep copy of the other individual in the current individual.
     * @param other Individual to copy
     */
    deepCopy(other: MutableIndividual<List<T>>): void;
    /**
     * Converts a gene into a string. If the gene can't be converted, it throws an
     * error.
     * @param gene Gene to convert into a string
     * @return String that represents the gene.
     */
    protected geneToString(gene: List<T>): string;
}
