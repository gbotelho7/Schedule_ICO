"use strict";
/*
 * @license
 * Copyright (c) 2021 Cristo Navarro.
 * Copyright (c) 2020 Francisco Cruz.
 * Copyright (c) 2019 Cristian Abrante.
 * All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListIndividual = void 0;
const lodash_1 = require("lodash");
const base_1 = require("../base");
/**
 * ## List Individual
 * List Individual is a individual where all the genes in the genotype are
 * simple linked lists.
 * @typeparam T type of the data of the lists nodes
 */
class ListIndividual extends base_1.MutableIndividual {
    /**
     * Constructor of the class.
     * Initializes the genotype of the individual with the given lists.
     * @param creationParams Initial genotype for the individual
     */
    constructor(genotype) {
        super(Array.from(genotype));
    }
    /**
     * Creates a deep copy of the other individual in the current individual.
     * @param other Individual to copy
     */
    deepCopy(other) {
        this.setGenotype(lodash_1.cloneDeep(other.genotype));
    }
    /**
     * Converts a gene into a string. If the gene can't be converted, it throws an
     * error.
     * @param gene Gene to convert into a string
     * @return String that represents the gene.
     */
    geneToString(gene) {
        if (gene.toString !== undefined && typeof gene.toString === 'function') {
            return gene.toString();
        }
        else {
            throw new Error("Can't convert gene to String.");
        }
    }
}
exports.ListIndividual = ListIndividual;
//# sourceMappingURL=ListIndividual.js.map