"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutableIndividual = void 0;
const index_1 = require("./index");
/**
 * ## Mutable Individual
 * Provides a basic implementation of the mutable interface.
 * Also extends BaseIndividual class.
 */
class MutableIndividual extends index_1.BaseIndividual {
    /**
     * Copy other individual into the current.
     * Creates a shallow copy, with the references
     * only.
     * @param other individual to copy
     */
    copy(other) {
        this.setGenotype(other.genotype);
    }
    /**
     * Transfers a copy of a section of the genotype
     * between different parts of it.
     * @param target position where to start the copy.
     * @param start position of the desired section. By default is `0`.
     * @param end position of the desired section,
     *        by default is the length of the individual.
     */
    copyWithin(target, start = 0, end = this.length()) {
        this.setGenotype(this.genotype.copyWithin(target, start, end));
    }
    /**
     * Fill the genotype with the specified gene.
     * @param gene we want to fill the genotype with.
     * @param start position of the fill, by default is `0`.
     * @param end position of the fill, by default is
     *        the length of the genotype.
     */
    fill(gene, start = 0, end = this.length()) {
        this.setGenotype(this.genotype.fill(gene, start, end));
    }
    /**
     * Creates a new genotype with the result of
     * the execution of the specified callback for each
     * element.
     * @param callback called for each gene.
     */
    map(callback) {
        this.setGenotype(this.genotype.map(callback));
    }
    /**
     * Reverses the genotype.
     */
    reverse() {
        this.setGenotype(this.genotype.reverse());
    }
    /**
     * Sets the gene at specified index to
     * the specified value.
     * @param geneIndex index of the gene to be set.
     * @param gene new value of the gene.
     * @throws RangeError if index is not in range [0-length)
     */
    set(geneIndex, gene) {
        this.checkIndexRange(geneIndex);
        this.genotype[geneIndex] = gene;
    }
}
exports.MutableIndividual = MutableIndividual;
//# sourceMappingURL=MutableIndividual.js.map