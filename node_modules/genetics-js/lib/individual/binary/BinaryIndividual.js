"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryIndividual = void 0;
const BinaryReader_1 = require("../../reader/binary/BinaryReader");
const base_1 = require("../base/");
const reader = new BinaryReader_1.BinaryReader();
/**
 * ## Binary individual
 * A binary individual has only boolean values
 * in its genotype. It could be represented by
 * a string of `0` and `1` or `t` and `f`.
 * ```
 * let ind = new BinaryIndividual('0010100');
 * console.log(ind.genotype) // [false, false, true, false, true, false, false]
 * console.log(ind) // 0 0 1 0 1 0 0
 * ```
 */
class BinaryIndividual extends base_1.MutableIndividual {
    /**
     * Constructor of the class, expects an array
     * of boolean values or an string separated by
     * any number of spaces, with the following tokens:
     *
     * * (`0` | `f` | `F`) -> `false`
     * * (`1` | `t` | `T`) -> `true`
     *
     * Example:
     * ```
     *  01 0 10 01 // OK
     *    tf ff tf // OK
     *  T FTFFTF // OK
     *  0 1Ff tT // OK
     * ```
     * @param representation of the individual.
     */
    constructor(representation) {
        if (typeof representation === 'string') {
            super([]);
            this.copy(reader.read(representation));
        }
        else {
            super(representation);
        }
    }
    /**
     * Creates a deep copy of the
     * other individual in the current.
     * @param other individual to copy.
     */
    deepCopy(other) {
        this.setGenotype(Array.from(other.genotype));
    }
    flip(index) {
        this.set(index, !this.get(index));
    }
    /**
     * Converts a gene to string, useful for method
     * `toString`.
     * @param gene that we are converting.
     */
    geneToString(gene) {
        return gene ? '1' : '0';
    }
}
exports.BinaryIndividual = BinaryIndividual;
//# sourceMappingURL=BinaryIndividual.js.map