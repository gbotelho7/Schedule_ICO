"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingIndividual = void 0;
const floating_1 = require("../../../reader/numeric/floating");
const base_1 = require("../base");
/**
 * ## Floating Individual
 * Floating individual is an individual which
 * contains an array of floating point numbers.
 * The representation could be a string with
 * the numbers or the array of numbers.
 */
class FloatingIndividual extends base_1.NumericIndividual {
    /**
     * Constructor of the class.
     * It takes a representation and a range as
     * parameters.
     *
     * Representation could be a string or an
     * array of numbers. If representation is
     * a `string`, it takes the default range as
     * parameter. if it is a number[]` it takes the
     * specified range.
     * @param representation
     * @param range of the individual. Only if representation
     *        is a `number[]`.
     * @throws Error if range is not valid.
     * @throws RangeError if representation is a `number[]` and
     *          is not in range specified by the range parameter.
     * @throws Error if representation is an `string` with an
     *          wrong format.
     */
    constructor(representation, range = base_1.NumericRange.DEFAULT) {
        if (typeof representation === 'string') {
            super([]);
            const reader = new floating_1.FloatingReader();
            this.copy(reader.read(representation));
        }
        else {
            super(representation, range);
        }
    }
}
exports.FloatingIndividual = FloatingIndividual;
//# sourceMappingURL=FloatingIndividual.js.map