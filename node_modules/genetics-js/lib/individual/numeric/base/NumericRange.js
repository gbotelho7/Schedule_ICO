"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericRange = void 0;
/**
 * ## Numeric Range
 * Represents a numeric range.
 */
class NumericRange {
    constructor(lowest = Number.NEGATIVE_INFINITY, highest = Number.POSITIVE_INFINITY) {
        this._lowest = Number.NEGATIVE_INFINITY;
        this._highest = Number.POSITIVE_INFINITY;
        this.set(lowest, highest);
    }
    static isArrayInRange(array, range) {
        return array.every(value => this.isValueInRange(value, range));
    }
    static isValueInRange(value, range) {
        return value >= range.lowest && value <= range.highest;
    }
    static normalizeValueToRange(value, range) {
        if (!this.isValueInRange(value, range)) {
            return value < range.lowest ? range.lowest : range.highest;
        }
        else {
            return value;
        }
    }
    static checkRangeValues(lowest, highest) {
        if (!this.rangeValuesAreValid(lowest, highest)) {
            throw new Error(`Error: range [${lowest}, ${highest}] is not a valid range.`);
        }
    }
    static rangeValuesAreValid(lowest, highest) {
        return lowest < highest;
    }
    get lowest() {
        return this._lowest;
    }
    set lowest(value) {
        this.set(value, this.highest);
    }
    get highest() {
        return this._highest;
    }
    set highest(value) {
        this.set(this.lowest, value);
    }
    set(lowest, highest) {
        NumericRange.checkRangeValues(lowest, highest);
        this._lowest = lowest;
        this._highest = highest;
    }
}
exports.NumericRange = NumericRange;
NumericRange.DEFAULT = new NumericRange();
//# sourceMappingURL=NumericRange.js.map