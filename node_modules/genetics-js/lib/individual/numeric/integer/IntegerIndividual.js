"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegerIndividual = void 0;
const base_1 = require("../base");
const integer_1 = require("./../../../reader/numeric/integer");
const utils_1 = require("./utils");
/**
 * ## Integer individual
 * Integer individual is a numeric individual
 * where all the genes in the genotype are integers.
 */
class IntegerIndividual extends base_1.NumericIndividual {
    /**
     * Constructor of the class.
     * Takes the representation as
     * an array of numbers or a string
     * and an optional range.
     * @param representation of the individual.
     * @param range of the individual, if not provided
     *        is the default range.
     */
    constructor(representation, range = base_1.NumericRange.DEFAULT) {
        if (typeof representation === 'string') {
            super([]);
            const reader = new integer_1.IntegerReader();
            this.copy(reader.read(representation));
        }
        else {
            super(utils_1.IntegerNormalizer.normalizeGenotype(representation), utils_1.IntegerNormalizer.normalizeRange(range));
        }
    }
    /**
     * Copy other individual into the current.
     * Creates a shallow copy, with the references
     * only.
     * @param other individual to copy
     */
    copy(other) {
        this.setGenotype(other.genotype);
        this.setRange(other.range);
    }
    /**
     * Creates a deep copy of the other individual
     * in the current.
     * @param other individual to copy.
     */
    deepCopy(other) {
        this.setGenotype(Array.from(other.genotype));
        this.setRange(new base_1.NumericRange(other.range.lowest, other.range.highest));
    }
    /**
     * Fill the genotype with the specified gene.
     * @param gene we want to fill the genotype with.
     *        if it is not an integer it will be normalized.
     * @param start position.
     * @param end position.
     * @throws RangeError if gene is not in range.
     */
    fill(gene, start = 0, end = this.length()) {
        super.fill(utils_1.IntegerNormalizer.normalize(gene), start, end);
    }
    /**
     * Creates a new genotype with the result of
     * the execution of the specified callback for each
     * element.
     * Result of the callback will be normalized to
     * an integer if it is not.
     * @param callback called for each gene.
     * @throws RangeError if callback result is not in range.
     */
    map(callback) {
        const normalizedCallback = (gene, geneIndex, genotype) => {
            return utils_1.IntegerNormalizer.normalize(callback(gene, geneIndex, genotype));
        };
        return super.map(normalizedCallback);
    }
    /**
     * Sets the gene at specified index to
     * the specified value.
     * @param geneIndex index of the gene to be set.
     *        if it is not an integer it will be normalized.
     * @param gene new value of the gene.
     * @throws RangeError if gene is not in range.
     */
    set(geneIndex, gene) {
        super.set(geneIndex, utils_1.IntegerNormalizer.normalize(gene));
    }
}
exports.IntegerIndividual = IntegerIndividual;
//# sourceMappingURL=IntegerIndividual.js.map