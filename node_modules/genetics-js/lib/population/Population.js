"use strict";
/*
 * @license
 * Copyright (c) 2021 Cristo Navarro.
 * Copyright (c) 2020 Francisco Cruz.
 * Copyright (c) 2019 Cristian Abrante.
 * All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Population = void 0;
class Population {
    constructor(fitnessComparisonFunction) {
        this.populationStatistics = {
            averageAge: 0,
            averageFitness: 0,
            fitnessSum: 0,
            fittestIndividualIndex: -1,
        };
        this.items = [];
        this.bestNewFitnessSelector = fitnessComparisonFunction
            ? fitnessComparisonFunction
            : Population.DEFAULT_BEST_NEW_FITNESS_SELECTOR;
    }
    generatePopulationWithOperations(populationSize, generator, generatorParams, fitnessFunction) {
        this.items = [];
        for (let i = 0; i < populationSize; i++) {
            const individual = generator.generateWith(generatorParams);
            const fitness = fitnessFunction(individual);
            this.pushIndividual(individual, fitness);
        }
    }
    getPopulationSize() {
        return this.items.length;
    }
    replacePopulation(populationItems) {
        this.items = populationItems;
        this.setStatistics();
    }
    pushIndividual(individual, fitness, age) {
        const previousAgeSum = this.populationStatistics.averageAge * this.getPopulationSize();
        this.items.push({
            age: age ? age : 0,
            fitness: fitness ? fitness : Population.DEFAULT_FITNESS,
            individual,
        });
        const lastItem = this.items[this.items.length - 1];
        this.populationStatistics.averageAge = (previousAgeSum + lastItem.age) / this.getPopulationSize();
        this.populationStatistics.fitnessSum += lastItem.fitness;
        this.populationStatistics.averageFitness = this.populationStatistics.fitnessSum / this.getPopulationSize();
        const fittest = this.getFittestIndividualItem();
        if (fittest === undefined) {
            this.populationStatistics.fittestIndividualIndex = this.items.length - 1;
        }
        else {
            if (this.bestNewFitnessSelector(fittest.fitness, lastItem.fitness)) {
                this.populationStatistics.fittestIndividualIndex = this.items.length - 1;
            }
        }
    }
    getFittestIndividualItem() {
        const index = this.populationStatistics.fittestIndividualIndex;
        return index === Population.DEFAULT_FITTEST_IND_INDEX ? undefined : this.getPopulationItem(index);
    }
    getPopulationItem(index) {
        return this.items[index];
    }
    getPopulationItems() {
        return this.items;
    }
    setStatistics() {
        this.populationStatistics = {
            averageAge: 0,
            averageFitness: 0,
            fitnessSum: 0,
            fittestIndividualIndex: Population.DEFAULT_FITTEST_IND_INDEX,
        };
        this.items.forEach((item, index) => {
            this.populationStatistics.averageAge += item.age;
            this.populationStatistics.fitnessSum += item.fitness;
            const fittest = this.getFittestIndividualItem();
            if (fittest === undefined) {
                this.populationStatistics.fittestIndividualIndex = index;
            }
            else {
                if (this.bestNewFitnessSelector(fittest.fitness, item.fitness)) {
                    this.populationStatistics.fittestIndividualIndex = index;
                }
            }
        });
        this.populationStatistics.averageAge /= this.getPopulationSize();
        this.populationStatistics.averageFitness = this.populationStatistics.fitnessSum / this.getPopulationSize();
    }
}
exports.Population = Population;
Population.DEFAULT_FITNESS = 0.0;
Population.DEFAULT_FITTEST_IND_INDEX = -1;
Population.DEFAULT_BEST_NEW_FITNESS_SELECTOR = (currentBestFitness, newElementFitness) => {
    return newElementFitness > currentBestFitness;
};
//# sourceMappingURL=Population.js.map