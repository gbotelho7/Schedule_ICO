"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniformCrossover = void 0;
const utils_1 = require("../../generator/utils");
const BaseCrossover_1 = require("./BaseCrossover");
class UniformCrossover extends BaseCrossover_1.BaseCrossover {
    cross(firstParent, secondParent, individualConstructor, selectionThreshold = 0.5, engine = utils_1.Generator.DEFAULT_ENGINE) {
        return this.crossWith(firstParent, secondParent, { individualConstructor, selectionThreshold, engine });
    }
    crossWith(firstParent, secondParent, params) {
        this.checkParams(params);
        return super.crossWith(firstParent, secondParent, params);
    }
    getGenotypeValues(firstParent, secondParent, params, index) {
        const value = utils_1.Generator.generateProbability(params.engine);
        const parentSelectionCondition = value <= params.selectionThreshold;
        return {
            first: parentSelectionCondition ? firstParent.get(index) : secondParent.get(index),
            second: parentSelectionCondition ? secondParent.get(index) : firstParent.get(index),
        };
    }
    checkParams(params) {
        if (!utils_1.Generator.probabilityIsValid(params.selectionThreshold)) {
            throw new Error(`Uniform Crossover: selection threshold ${params.selectionThreshold} should be in range [0.0, 1.0]`);
        }
    }
}
exports.UniformCrossover = UniformCrossover;
//# sourceMappingURL=UniformCrossover.js.map