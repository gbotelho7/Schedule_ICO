"use strict";
/*
 * @license
 * Copyright (c) 2021 Cristo Navarro.
 * Copyright (c) 2020 Francisco Cruz.
 * Copyright (c) 2019 Cristian Abrante.
 * All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseListCrossover = void 0;
const utils_1 = require("../../generator/utils");
const index_1 = require("../../index");
const index_2 = require("../index");
/**
 * ## BaseListCrossover
 *
 * Abstract class that defines the basic methods for a crossover operation that
 * involves List Individuals.
 *
 * To implement a specific operator, the method getGenotypeValues must be
 * implemented.
 */
class BaseListCrossover extends index_2.BaseCrossover {
    constructor() {
        super(...arguments);
        /**
         * Index for each list of both parents to apply the operator.
         */
        this.crossoverIndexes = [];
    }
    /**
     * Apply the crossover operation between the two individuals given, using
     * the specified engine to generate random indexes. It returns the two
     * new individuals obtained.
     * @param firstParent First individual
     * @param secondParent Second individual
     * @param engine Engine to generate random indexes
     * @return Array with the two new individuals.
     */
    cross(firstParent, secondParent, engine = utils_1.Generator.DEFAULT_ENGINE) {
        return this.crossWith(firstParent, secondParent, { engine, individualConstructor: index_1.ListIndividual });
    }
    /**
     * Apply the crossover operation between the two individuals given, using
     * the specified parameters. It returns the two new individuals obtained.
     * @param firstParent First individual
     * @param secondParent Second individual
     * @param params Parameters for the operator
     * @return Array with the two new individuals.
     */
    crossWith(firstParent, secondParent, params) {
        this.setCrossoverIndexes(firstParent, secondParent);
        return super.crossWith(firstParent, secondParent, params);
    }
}
exports.BaseListCrossover = BaseListCrossover;
//# sourceMappingURL=BaseListCrossover.js.map