import { ListIndividual } from '../../index';
import { List } from '../../index';
import { BaseCrossover } from '../index';
import { CrossoverParams } from '../index';
/**
 * ## BaseListCrossoverParams
 * Interface to define the parameters for the crossover operation.
 */
export interface BaseListCrossoverParams<T> extends CrossoverParams<ListIndividual<T>, List<T>> {
}
/**
 * ## BaseListCrossover
 *
 * Abstract class that defines the basic methods for a crossover operation that
 * involves List Individuals.
 *
 * To implement a specific operator, the method getGenotypeValues must be
 * implemented.
 */
export declare abstract class BaseListCrossover<T> extends BaseCrossover<ListIndividual<T>, List<T>, BaseListCrossoverParams<T>> {
    /**
     * Index for each list of both parents to apply the operator.
     */
    protected crossoverIndexes: number[][];
    /**
     * Apply the crossover operation between the two individuals given, using
     * the specified engine to generate random indexes. It returns the two
     * new individuals obtained.
     * @param firstParent First individual
     * @param secondParent Second individual
     * @param engine Engine to generate random indexes
     * @return Array with the two new individuals.
     */
    cross(firstParent: ListIndividual<T>, secondParent: ListIndividual<T>, engine?: import("random-js").Engine): Array<ListIndividual<T>>;
    /**
     * Apply the crossover operation between the two individuals given, using
     * the specified parameters. It returns the two new individuals obtained.
     * @param firstParent First individual
     * @param secondParent Second individual
     * @param params Parameters for the operator
     * @return Array with the two new individuals.
     */
    crossWith(firstParent: ListIndividual<T>, secondParent: ListIndividual<T>, params: BaseListCrossoverParams<T>): Array<ListIndividual<T>>;
    /**
     * For each list of both parents, a random index is generated based on the
     * previously calculated range.
     * @param firstParent First individual
     * @param secondParent Second individual
     */
    protected abstract setCrossoverIndexes(firstParent: ListIndividual<T>, secondParent: ListIndividual<T>): void;
    /**
     * Calculates the gene of the corresponding index for the new individuals.
     * @param firstParent First individual
     * @param secondParent Second individual
     * @param params Parameters for the operator
     * @param index Gene to apply the operator
     * @return Object containing the gene for the new individuals.
     */
    protected abstract getGenotypeValues(firstParent: ListIndividual<T>, secondParent: ListIndividual<T>, params: BaseListCrossoverParams<T>, index: number): {
        first: List<T>;
        second: List<T>;
    };
}
