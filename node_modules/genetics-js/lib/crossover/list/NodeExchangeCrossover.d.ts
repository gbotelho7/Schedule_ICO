import { List } from '../../index';
import { ListIndividual } from '../../index';
import { BaseListCrossover, BaseListCrossoverParams } from './BaseListCrossover';
/**
 * ## NodeExchangeCrossover
 *
 * Class that defines a crossover operator for List Individuals. It is applied
 * to each gene of the parents and exhanges one node selected at random.
 *
 * For the first child, the corresponding gene will be a list with the nodes of
 * the first parent, but one of them will be replaced with one from the second
 * parent. For the second child, it will have the nodes of the second parent but
 * won't have the node that was given to the first one, and instead, it will
 * have the one that was replaced.
 */
export declare class NodeExchangeCrossover<T> extends BaseListCrossover<T> {
    /**
     * Calculates the gene of the corresponding index for the new individuals.
     * The first child has the nodes of the first parent, but one of them is
     * replaced with one of the second parent. The same happens to the second
     * child but with the nodes of the second parent.
     * @param firstParent
     * @param secondParent
     * @param params
     * @param index
     */
    protected getGenotypeValues(firstParent: ListIndividual<T>, secondParent: ListIndividual<T>, params: BaseListCrossoverParams<T>, index: number): {
        first: List<T>;
        second: List<T>;
    };
    /**
     * Establishes the index for the crossover operator of a given gene. It is
     * calculated based on the legnth of the list corresponding to the indicated
     * gene.
     * @param individual Current individual
     * @param geneIndex Position of the gene in the individual
     * @return Number corresponding to the index for the crossover operator.
     */
    protected getGeneCrossoverIndex(individual: ListIndividual<T>, geneIndex: number): number;
    /**
     * For each list of both parents, a random index is generated based on the
     * previously calculated range.
     * @param firstParent First individual
     * @param secondParent Second individual
     */
    protected setCrossoverIndexes(firstParent: ListIndividual<T>, secondParent: ListIndividual<T>): void;
}
