"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryGenerator = void 0;
const base_1 = require("../base");
const utils_1 = require("../utils");
const binary_1 = require("./../../individual/binary");
/**
 * ## BinaryGenerator
 * Generator of binary individuals.
 */
class BinaryGenerator extends base_1.BaseGenerator {
    /**
     * Throws an exception if chance is not in
     * range [0.0 - 1.0].
     * @param chance that is going to be tested.
     * @throws RangeError if chance is not in range.
     */
    static checkChance(chance) {
        if (!utils_1.Generator.probabilityIsValid(chance)) {
            throw new RangeError(`BinaryGenerator: chance ${chance} is not in range [0.0 - 1.0]`);
        }
    }
    /**
     * Generates an individual with the specified
     * params.
     * @param length of the individual.
     * @param chance of a generated gene to be `true`.
     *        By default is `0.5`.
     * @param engine (of `random-js`) that is going to be used.
     * @return The [[BinaryIndividual]] with the generated genotype.
     * @throws RangeError if `length` is not greater than `0`.
     * @throws RangeError if `chance` is not in range [0.0 - 1.0].
     */
    generate(length, chance = 0.5, engine = utils_1.Generator.DEFAULT_ENGINE) {
        const params = { chance, engine, length };
        return this.generateWith(params);
    }
    /**
     * Generates a gene with the specified params.
     * @param params of the generator.
     * @return the generated gene.
     */
    generateGene(params) {
        return utils_1.Generator.generateBoolean(params.chance, params.engine);
    }
    /**
     * Generates an individual with the specified
     * params.
     * @param params of the generator.
     * @return The [[BinaryIndividual]] with the generated genotype.
     * @throws RangeError if `chance` is not in range [0.0 - 1.0].
     * @throws RangeError if `length` is not greater than `0`.
     */
    generateWith(params) {
        BinaryGenerator.checkChance(params.chance);
        return super.generateWith(params);
    }
    /**
     * Construct a [[BinaryIndividual]] given
     * a genotype.
     * @param genotype
     */
    construct(genotype) {
        return new binary_1.BinaryIndividual(genotype);
    }
}
exports.BinaryGenerator = BinaryGenerator;
//# sourceMappingURL=BinaryGenerator.js.map