"use strict";
/*
 * @license
 * Copyright (c) 2019 Cristian Abrante. All rights reserved.
 * Licensed under the MIT License. See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseGenerator = void 0;
/**
 * ## BaseIndividualGenerator
 * This class provides with the basic features of a
 * individual generator.
 */
class BaseIndividualGenerator {
    /**
     * Checks if a given individual length is in range.
     * @param length that is going to be evaluated.
     * @return `true` is length is greater than zero and `false`
     *          otherwise.
     */
    static lengthIsInRange(length) {
        return length >= 0;
    }
    /**
     * Throws an exception if length is not in range.
     * @param length that is going to be checked.
     * @throws RangeError if length is not in range.
     */
    static checkLength(length) {
        if (!this.lengthIsInRange(length)) {
            throw new RangeError(`BaseIndividualGenerator: length ${length} is not valid.`);
        }
    }
    /**
     * Generates the genotype given the params
     * of the generator.
     * @param params of the generator.
     */
    generateGenotype(params) {
        return Array.from(new Array(params.length), () => this.generateGene(params));
    }
    /**
     * Generates an individual given some
     * params.
     * @param params for the generator.
     * @throws RangeError if length of the params
     *          is not in range.
     */
    generateWith(params) {
        BaseIndividualGenerator.checkLength(params.length);
        return this.construct(this.generateGenotype(params), params);
    }
}
exports.BaseGenerator = BaseIndividualGenerator;
//# sourceMappingURL=BaseGenerator.js.map